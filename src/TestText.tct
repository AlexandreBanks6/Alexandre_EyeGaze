%Used to prep the data to train Max's compensation model
function compensation_data=prepMaxCompensationData(data_matrix,model_cell,dist_cell,PG_Estimation_Models)
    %{
    Input: 

    data_matrix: data for  training the compensation model
    model_cell: the cell containing the polynomial regression models
    dist_cell: the cell with the distances between calibration glints
    PG_Estimation_Models: cell array with the models to find the PG at the
    calibrated pupil position
    
 

    Output:

    compensationData is a cell array with two columns having:
    col 1: the pg type (e.g. pg0_left_x, pg0_left_y, etc.)
    col 2: the actual corresponding data with: del_POG (x or y),
    del_PG_x, del_PG_y
    
    %}
    
    left_headers={'pg0_left_x','pg0_left_y','pg1_left_x','pg1_left_y','pg2_left_x','pg2_left_y'};
    right_headers={'pg0_right_x','pg0_right_y','pg1_right_x','pg1_right_y','pg2_right_x','pg2_right_y'};
    check_model_right=any(ismember(model_cell(:,1),right_headers));
    check_model_left=any(ismember(model_cell(:,1),left_headers));

    %Initializing Results Data
    compensation_data=cell(12,2);
    compensation_data(:,1)=[left_headers';right_headers'];
    if iscell(PG_Estimation_Models)
        reformatted_data=reformatMaxData(data_matrix);
    
    
        %------------------<Right Data First>-------------------
        [row_n,~]=size(reformatted_data);
    
        for i=[1:row_n]
            curr_row=reformatted_data(i,:); %Current data row 
            
            t_x=curr_row(end-1);
            t_y=curr_row(end);
    
            nan_indexs=isnan(curr_row(1:6));
            nan_indx_values=find(nan_indexs);
    
            if length(nan_indx_values)<3 %At least two x,y pairs are detected
                stripped_header=right_headers(~nan_indexs); %Extracts the pg type that is valid for this frame
                valid_header=findPgWithAssociatedDistance(stripped_header,dist_cell);
                
                if length(valid_header)>2
                    model_valid_indexes=ismember(model_cell(:,1),valid_header);
                    updated_model_cell=model_cell(model_valid_indexes,:);
                    [row_new,~]=size(updated_model_cell);
    
                    for j=[1:floor(row_new/2)]
    
                        %Prepping correct indexing
                        model_x=updated_model_cell{j*2-1,3};
                        model_y=updated_model_cell{j*2,3};
                        header_x=valid_header{j*2-1};
                        header_y=valid_header{j*2};
                        pg_x_ind=ismember(right_headers,header_x);
                        pg_y_ind=ismember(right_headers,header_y);
    
                        %Getting pupil position
                        pupil_x=curr_row(13);
                        pupil_y=curr_row(14);
    
                        %Getting Correct PG Estimation Model
                        PG_Estimation_Headers=PG_Estimation_Models(:,1);
                        pg_estimation_indx=ismember(PG_Estimation_Headers,header_x);
                        pg_estimation_indy=ismember(PG_Estimation_Headers,header_y);
    
                        PG_model_x=PG_Estimation_Models{pg_estimation_indx,2};
                        PG_model_y=PG_Estimation_Models{pg_estimation_indy,2};
                        if ~isempty(PG_model_x) && ~isempty(PG_model_y)
                            
                            %Estimating PG
                            PG_estim_x=PG_model_x(1)+PG_model_x(2)*pupil_x+PG_model_x(3)*pupil_y;
                            PG_estim_y=PG_model_x(1)+PG_model_y(2)*pupil_x+PG_model_y(3)*pupil_y;
                            
                            %Getting delta PG 
                            pgsonly=curr_row(1:6);
                            
                            pg_x=pgsonly(pg_x_ind);
                            pg_y=pgsonly(pg_y_ind);
                            delta_pg_x=pg_x-PG_estim_x;
                            delta_pg_y=pg_y-PG_estim_y;
        
                            %Getting estimated POG
                            
                            [d_calib,d_curr]=findScalingFactors(dist_cell,valid_header,right_headers,pgsonly);
                        
                            if isnan(d_calib)||isnan(d_curr)
                                %error_vec=[error_vec;[nan,nan,t_x,t_y]];
                                continue
                            end
                            
                            pg_x=(d_calib/d_curr).*pg_x;
                            pg_y=(d_calib/d_curr).*pg_y;
            
                            [predictors_x,predictors_y]=customPolynomial(pg_x,pg_y);
            
                            POG_x=findPOG(model_x,predictors_x);
                            POG_y=findPOG(model_y,predictors_y);
                            
        
                            delta_POG_x=t_x-POG_x;
                            delta_POG_y=t_y-POG_y;

                            %Saving Results
                            results_headers=compensation_data(:,1);
                            results_ind_x=ismember(results_headers,header_x);
                            results_ind_y=ismember(results_headers,header_y);

                            data_x=compensation_data{results_ind_x,2};
                            data_y=compensation_data{results_ind_y,2};

                            data_x=[data_x;delta_POG_x,delta_pg_x,delta_pg_y];
                            data_y=[data_y;delta_POG_y,delta_pg_x,delta_pg_y];

                            compensation_data{results_ind_x,2}=data_x;
                            compensation_data{results_ind_y,2}=data_y;


                        end   
    
                    end
                end
            end
    
        end




        %------------------<Left Data Next>-------------------
        [row_n,~]=size(reformatted_data);
    
        for i=[1:row_n]
            curr_row=reformatted_data(i,:); %Current data row 
            
            t_x=curr_row(end-1);
            t_y=curr_row(end);
    
            nan_indexs=isnan(curr_row(7:12));
            nan_indx_values=find(nan_indexs);
    
            if length(nan_indx_values)<3 %At least two x,y pairs are detected
                stripped_header=left_headers(~nan_indexs); %Extracts the pg type that is valid for this frame
                valid_header=findPgWithAssociatedDistance(stripped_header,dist_cell);
                
                if length(valid_header)>2
                    model_valid_indexes=ismember(model_cell(:,1),valid_header);
                    updated_model_cell=model_cell(model_valid_indexes,:);
                    [row_new,~]=size(updated_model_cell);
    
                    for j=[1:floor(row_new/2)]
    
                        %Prepping correct indexing
                        model_x=updated_model_cell{j*2-1,3};
                        model_y=updated_model_cell{j*2,3};
                        header_x=valid_header{j*2-1};
                        header_y=valid_header{j*2};
                        pg_x_ind=ismember(left_headers,header_x);
                        pg_y_ind=ismember(left_headers,header_y);
    
                        %Getting pupil position
                        pupil_x=curr_row(15);
                        pupil_y=curr_row(16);
    
                        %Getting Correct PG Estimation Model
                        PG_Estimation_Headers=PG_Estimation_Models(:,1);
                        pg_estimation_indx=ismember(PG_Estimation_Headers,header_x);
                        pg_estimation_indy=ismember(PG_Estimation_Headers,header_y);
    
                        PG_model_x=PG_Estimation_Models{pg_estimation_indx,2};
                        PG_model_y=PG_Estimation_Models{pg_estimation_indy,2};
                        if ~isempty(PG_model_x) && ~isempty(PG_model_y)
                            
                            %Estimating PG
                            PG_estim_x=PG_model_x(1)+PG_model_x(2)*pupil_x+PG_model_x(3)*pupil_y;
                            PG_estim_y=PG_model_x(1)+PG_model_y(2)*pupil_x+PG_model_y(3)*pupil_y;
                            
                            %Getting delta PG 
                            pgsonly=curr_row(7:12);
                            
                            pg_x=pgsonly(pg_x_ind);
                            pg_y=pgsonly(pg_y_ind);
                            delta_pg_x=pg_x-PG_estim_x;
                            delta_pg_y=pg_y-PG_estim_y;
        
                            %Getting estimated POG
                            
                            [d_calib,d_curr]=findScalingFactors(dist_cell,valid_header,left_headers,pgsonly);
                        
                            if isnan(d_calib)||isnan(d_curr)
                                %error_vec=[error_vec;[nan,nan,t_x,t_y]];
                                continue
                            end
                            
                            pg_x=(d_calib/d_curr).*pg_x;
                            pg_y=(d_calib/d_curr).*pg_y;
            
                            [predictors_x,predictors_y]=customPolynomial(pg_x,pg_y);
            
                            POG_x=findPOG(model_x,predictors_x);
                            POG_y=findPOG(model_y,predictors_y);
                            
        
                            delta_POG_x=t_x-POG_x;
                            delta_POG_y=t_y-POG_y;

                            %Saving Results
                            results_headers=compensation_data(:,1);
                            results_ind_x=ismember(results_headers,header_x);
                            results_ind_y=ismember(results_headers,header_y);

                            data_x=compensation_data{results_ind_x,2};
                            data_y=compensation_data{results_ind_y,2};

                            data_x=[data_x;delta_POG_x,delta_pg_x,delta_pg_y];
                            data_y=[data_y;delta_POG_y,delta_pg_x,delta_pg_y];

                            compensation_data{results_ind_x,2}=data_x;
                            compensation_data{results_ind_y,2}=data_y;


                        end   
    
                    end
                end
            end
    
        end

    end


   
    


end