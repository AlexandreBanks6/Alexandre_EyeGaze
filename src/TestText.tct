%Getting the pupil position (right_x, and right_y)
                    pupil_x=curr_row(end-3);
                    pupil_y=curr_row(end-2);

                    %Getting Correct PG Estimation Model
                    PG_Estimation_Headers=PG_Estimation_Models(:,1);
                    pg_estimation_indx=ismember(PG_Estimation_Headers,header_x);
                    pg_estimation_indy=ismember(PG_Estimation_Headers,header_y);

                    PG_model_x=PG_Estimation_Models{pg_estimation_indx,2};
                    PG_model_y=PG_Estimation_Models{pg_estimation_indy,2};
    
                    [d_calib,d_curr]=findScalingFactors(dist_cell,valid_header,right_headers,right_pgs);
                    
                    if ~isnan(d_calib) && ~isnan(d_curr)
                        
                    
                        pg_x=(d_calib/d_curr).*right_pgs(pg_x_ind);
                        pg_y=(d_calib/d_curr).*right_pgs(pg_y_ind);

        
                        [predictors_x,predictors_y]=customPolynomial(pg_x,pg_y);
        
                        POG_x_poly_right=findPOG(model_x,predictors_x);
                        POG_y_poly_right=findPOG(model_y,predictors_y);

                        %-----------<Running Max's approach>--------------
                        if ~isempty(PG_model_x) && ~isempty(PG_model_y)

                            %Estimating PG
                            PG_estim_x=PG_model_x(1)+PG_model_x(2)*pupil_x+PG_model_x(3)*pupil_y;
                            PG_estim_y=PG_model_x(1)+PG_model_y(2)*pupil_x+PG_model_y(3)*pupil_y;

                            %Finding delta PG 
                            delta_pg_x=right_pgs(pg_x_ind)-PG_estim_x;
                            delta_pg_y=right_pgs(pg_y_ind)-PG_estim_y;

                            %Finding appropriate POG compensation model
                            %(max)
                            POG_MaxModels_Headers=max_compensation_models(:,1);
                            pog_estimation_max_indx=ismember(POG_MaxModels_Headers,header_x);
                            pog_estimation_max_indy=ismember(POG_MaxModels_Headers,header_y);

                            pog_max_modelx=max_compensation_models{pog_estimation_max_indx,2};
                            pog_max_modely=max_compensation_models{pog_estimation_max_indy,2};

                            if ~isempty(pog_max_modelx) && ~isempty(pog_max_modely)
                                del_POG_max_x=pog_max_modelx(1)+pog_max_modelx(2)*delta_pg_x+pog_max_modelx(3)*delta_pg_y;
                                del_POG_max_y=pog_max_modely(1)+pog_max_modely(2)*delta_pg_x+pog_max_modely(3)*delta_pg_y;
                                
                                POG_x_max=del_POG_max_x+POG_x_poly_right;
                                POG_y_max=del_POG_max_y+POG_y_poly_right;

                                results_row(28)=del_POG_max_x;
                                results_row(29)=del_POG_max_y;
                                results_row(32)=delta_pg_x;
                                results_row(33)=delta_pg_y;
                                accuracy_max_right=sqrt((t_x-POG_x_max)^2+(t_y-POG_y_max)^2);
                                results_row(36)=accuracy_max_right;

                             end

                            
                        end